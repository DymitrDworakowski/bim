{"version":3,"file":"static/js/387.d6773eb2.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","pages/AdminBlogs.jsx","operations/operationsLogin.js"],"sourcesContent":["import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  noop,\n  notifyManager,\n  shouldThrowError,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n","import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  getBlogs,\r\n  createBlog,\r\n  deleteBlog,\r\n  updateBlog,\r\n  logout,\r\n} from \"../operations/operationsLogin\";\r\nimport { useState } from \"react\";\r\n\r\nfunction AdminBlogs() {\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      if (token) {\r\n        await logout(token);\r\n      }\r\n      navigate(\"/\"); // редірект на сторінку логіну\r\n    } catch (err) {\r\n      console.error(\"Logout failed:\", err);\r\n    }\r\n  };\r\n\r\n  const {\r\n    data: blogs,\r\n    isLoading,\r\n    error,\r\n  } = useQuery({\r\n    queryKey: [\"blogs\"],\r\n    queryFn: getBlogs,\r\n  });\r\n\r\n  // ➕ додавання\r\n  const [newBlog, setNewBlog] = useState({ title: \"\", content: \"\" });\r\n  const createMutation = useMutation({\r\n    mutationFn: (payload) => createBlog(payload, token),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries([\"blogs\"]);\r\n      setNewBlog({ title: \"\", content: \"\" });\r\n    },\r\n  });\r\n\r\n  // 🗑 видалення\r\n  const deleteMutation = useMutation({\r\n    mutationFn: (id) => deleteBlog(id, token),\r\n    onSuccess: () => queryClient.invalidateQueries([\"blogs\"]),\r\n  });\r\n\r\n  // ✏️ редагування\r\n  const [editingBlog, setEditingBlog] = useState(null);\r\n  const updateMutation = useMutation({\r\n    mutationFn: ({ id, data }) => updateBlog({ id, data, token }),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries([\"blogs\"]);\r\n      setEditingBlog(null);\r\n    },\r\n  });\r\n\r\n  if (isLoading) return <p>Loading...</p>;\r\n  if (error) return <p>Error: {error.message}</p>;\r\n\r\n  return (\r\n    <div className=\"p-6 bg-gray-100 min-h-screen\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">📑 Paneł zarządzania blogiem</h1>\r\n\r\n      {/* Форма для створення */}\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          createMutation.mutate(newBlog);\r\n        }}\r\n        className=\"flex flex-col gap-2 bg-white p-4 rounded shadow-md mb-6\"\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Nazwa\"\r\n          value={newBlog.title}\r\n          onChange={(e) => setNewBlog({ ...newBlog, title: e.target.value })}\r\n          className=\"border p-2 rounded\"\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"Napisz tu kontent\"\r\n          value={newBlog.content}\r\n          onChange={(e) => setNewBlog({ ...newBlog, content: e.target.value })}\r\n          className=\"border p-2 rounded\"\r\n          required\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-green-600 text-white py-2 rounded hover:bg-green-700\"\r\n        >\r\n          Dodaj blog\r\n        </button>\r\n      </form>\r\n\r\n      {/* Список блогів */}\r\n      <div className=\"space-y-4\">\r\n        {blogs.map((blog) => (\r\n          <div\r\n            key={blog._id}\r\n            className=\"bg-white p-4 rounded shadow-md flex flex-col gap-2\"\r\n          >\r\n            {editingBlog === blog._id ? (\r\n              <form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  updateMutation.mutate({\r\n                    id: blog._id,\r\n                    data: { title: newBlog.title, content: newBlog.content },\r\n                  });\r\n                }}\r\n                className=\"flex flex-col gap-2\"\r\n              >\r\n                <input\r\n                  type=\"text\"\r\n                  defaultValue={blog.title}\r\n                  onChange={(e) =>\r\n                    setNewBlog({ ...newBlog, title: e.target.value })\r\n                  }\r\n                  className=\"border p-2 rounded\"\r\n                />\r\n                <textarea\r\n                  defaultValue={blog.content}\r\n                  onChange={(e) =>\r\n                    setNewBlog({ ...newBlog, content: e.target.value })\r\n                  }\r\n                  className=\"border p-2 rounded\"\r\n                />\r\n                <div className=\"flex gap-2\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-blue-600 text-white py-1 px-3 rounded hover:bg-blue-700\"\r\n                  >\r\n                    Zapisać\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => setEditingBlog(null)}\r\n                    className=\"bg-gray-400 text-white py-1 px-3 rounded hover:bg-gray-500\"\r\n                  >\r\n                    Cofnąć\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            ) : (\r\n              <>\r\n                <h2 className=\"text-lg font-semibold\">{blog.title}</h2>\r\n                <p>{blog.content}</p>\r\n                <small>Autor: {blog.author || \"Admin\"}</small>\r\n                <div className=\"flex gap-2 mt-2\">\r\n                  <button\r\n                    onClick={() => setEditingBlog(blog._id)}\r\n                    className=\"bg-yellow-500 text-white py-1 px-3 rounded hover:bg-yellow-600\"\r\n                  >\r\n                    Edytuj\r\n                  </button>\r\n                  <button\r\n                    onClick={() => deleteMutation.mutate(blog._id)}\r\n                    className=\"bg-red-600 text-white py-1 px-3 rounded hover:bg-red-700\"\r\n                  >\r\n                    Usuń\r\n                  </button>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"flex justify-center\">\r\n        <button\r\n          className=\"bg-red-800 text-white py-1 px-3 rounded hover:bg-red-700 m-4 \"\r\n          onClick={handleLogout}\r\n        >\r\n          Wyloguj się\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminBlogs;\r\n","import axios from \"axios\";\r\n\r\n// створюємо інстанс axios з базовим URL\r\nexport const api = axios.create({\r\n  baseURL: \"https://bim-rest-api.onrender.com/api\",\r\n});\r\n\r\n// збереження/видалення токена в headers і localStorage\r\n// export const setAuthToken = (token) => {\r\n//   if (token) {\r\n//     api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     localStorage.setItem(\"token\", token);\r\n//   } else {\r\n//     delete api.defaults.headers.common[\"Authorization\"];\r\n//     localStorage.removeItem(\"token\");\r\n//   }\r\n// };\r\n\r\n// // 🔑 Логін\r\n// export const login = async (credentials) => {\r\n//   const { data } = await api.post(\"/admin/login\", credentials);\r\n//   // відповідає твій бекенд — має віддати { token }\r\n//   if (data.token) {\r\n//     setAuthToken(data.token);\r\n//   }\r\n//   return data;\r\n// };\r\n\r\nexport const login = async (values) => {\r\n  try {\r\n    const { data } = await api.post(\"/auth/login\", {\r\n      name: values.name,\r\n      email: values.email,\r\n      password: values.password,\r\n    });\r\n\r\n    // 🔑 токен зберігаємо у localStorage\r\n    if (data.token) {\r\n      localStorage.setItem(\"token\", data.token);\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Login failed:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n//LogOut\r\nexport const logout = async (token) => {\r\n  await api.post(\r\n    \"/auth/logout\",\r\n    {}, // тіло пусте\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  localStorage.removeItem(\"token\"); // ⚡ правильно видаляємо\r\n};\r\n\r\n// GET всі блоги\r\nexport const getBlogs = async () => {\r\n  const { data } = await api.get(\"/blog\");\r\n  return data;\r\n};\r\n\r\n// GET один блог\r\nexport const getBlog = async (id) => {\r\n  const { data } = await api.get(`/blog/${id}`);\r\n  return data;\r\n};\r\n\r\n// POST новий блог\r\nexport const createBlog = async ({ title, content }, token) => {\r\n  console.log(title, content);\r\n  const res = await api.post(\r\n    \"/blog\",\r\n    { title, content }, // ✅ правильна структура\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  console.log(res.data);\r\n  return res.data;\r\n};\r\n\r\n// PUT оновлення блогу\r\nexport const updateBlog = async ({ id, data, token }) => {\r\n  const res = await api.put(`/blog/${id}`, data, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// DELETE блог\r\nexport const deleteBlog = async (id, token) => {\r\n  const res = await api.delete(`/blog/${id}`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  return res.data;\r\n};\r\n"],"names":["MutationObserver","_client","WeakMap","_currentResult","_currentMutation","_mutateOptions","_Class_brand","WeakSet","Subscribable","constructor","client","options","super","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","this","setOptions","bindMethods","_assertClassBrand","_updateResult","call","mutate","bind","reset","_classPrivateFieldGet2","prevOptions","_classPrivateFieldGet","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","observer","mutationKey","hashKey","state","status","onUnsubscribe","_classPrivateFieldGet3","hasListeners","removeObserver","onMutationUpdate","action","_notify","getCurrentResult","_classPrivateFieldGet4","variables","_classPrivateFieldGet5","build","addObserver","execute","_classPrivateFieldGet6","_classPrivateFieldGet7","getDefaultState","_objectSpread","isPending","isSuccess","isError","isIdle","notifyManager","batch","context","_classPrivateFieldGet8","_classPrivateFieldGet9","_classPrivateFieldGet0","_classPrivateFieldGet1","onSuccess","data","onSettled","_classPrivateFieldGet10","_classPrivateFieldGet11","_classPrivateFieldGet12","_classPrivateFieldGet13","onError","error","listeners","forEach","listener","useMutation","queryClient","useQueryClient","React","result","onStoreChange","subscribe","batchCalls","mutateOptions","catch","noop","shouldThrowError","throwOnError","mutateAsync","navigate","useNavigate","token","localStorage","getItem","blogs","isLoading","useQuery","queryKey","queryFn","getBlogs","newBlog","setNewBlog","useState","title","content","createMutation","mutationFn","payload","createBlog","invalidateQueries","deleteMutation","id","deleteBlog","editingBlog","setEditingBlog","updateMutation","_ref","updateBlog","_jsx","children","_jsxs","message","className","onSubmit","e","preventDefault","placeholder","value","onChange","target","required","map","blog","_id","defaultValue","onClick","_Fragment","author","async","logout","err","console","api","axios","create","baseURL","login","post","name","values","email","password","setItem","_error$response","response","headers","Authorization","concat","removeItem","get","log","res","_ref2","put","delete"],"sourceRoot":""}